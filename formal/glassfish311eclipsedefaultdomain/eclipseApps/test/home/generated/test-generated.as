
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      test
 *  Source:     D:\Project\formal\test\flex_src\test.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.10.07 19:07:37 CST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Application;
import spark.components.Button;


[Frame(extraClass="_test_FlexInit")]

[Frame(factoryClass="_test_mx_managers_SystemManager")]


//  begin class def
public class test
    extends spark.components.Application
{

    //  instance variables

    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function test()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        this.minWidth = 955;
        this.minHeight = 600;
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_test_Array1_c);


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings


        // ambient styles
        mx_internal::_test_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 9 - 35

			import mx.rpc.events.ResultEvent;
			import mx.controls.Alert;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.remoting.RemoteObject;
			
			private function doOnHelloWorldOk(event:ResultEvent):void
			{
				var msg:String=event.result as String;
				Alert.show(msg);
			}
			private function doOnFault(event:FaultEvent):void
			{
				Alert.show(event.fault.faultDetail);
			}
			
			
			private function hello2():void
			{
				var destination:String="TestFacade";
				var ro:RemoteObject=new RemoteObject(destination);
				ro.addEventListener(ResultEvent.RESULT,doOnHelloWorldOk);
				ro.addEventListener(FaultEvent.FAULT,doOnFault);
				ro.hello();
				Alert.show("hi!");
			}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _test_Array1_c() : Array
{
	var temp : Array = [_test_Button1_c()];
	return temp;
}

private function _test_Button1_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.x = 203;
	temp.y = 116;
	temp.label = "Button";
	temp.addEventListener("click", ___test_Button1_click);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___test_Button1_click(event:flash.events.MouseEvent):void
{
	hello2();
}



    //  initialize style defs for test

    mx_internal var _test_StylesInit_done:Boolean = false;

    mx_internal function _test_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_test_StylesInit_done)
            return;
        else
            mx_internal::_test_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }


    //  embed carrier vars
    //  end embed carrier vars


//  end class def
}

//  end package def
}
