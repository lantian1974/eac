
/**
 *  Generated by mxmlc 4.0
 *
 *  Package:    
 *  Class:      test
 *  Source:     D:\Project\formal\test\flex_src\test.mxml
 *  Template:   flex2/compiler/mxml/gen/ClassDef.vm
 *  Time:       2011.11.04 14:47:49 CST
 */

package 
{

import flash.accessibility.*;
import flash.debugger.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.geom.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IFlexModuleFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.mx_internal;
import mx.filters.*;
import mx.styles.*;
import spark.components.Application;
import spark.components.Button;
import spark.components.TextArea;


[SWF( height='740', width='1343')]
[Frame(extraClass="_test_FlexInit")]

[Frame(factoryClass="_test_mx_managers_SystemManager")]


//  begin class def
public class test
    extends spark.components.Application
{

    //  instance variables
    [Bindable]
	/**
 * @private
 **/
    public var TextArea_config1 : spark.components.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var TextArea_config2 : spark.components.TextArea;

    [Bindable]
	/**
 * @private
 **/
    public var TextArea_config3 : spark.components.TextArea;


    //  type-import dummies



    //  constructor (Flex display object)
    /**
     * @private
     **/
    public function test()
    {
        super();

        mx_internal::_document = this;




        // layer initializers

       
        // properties
        this.width = 1343;
        this.height = 740;
        this.minWidth = 955;
        this.minHeight = 600;
        this.mxmlContentFactory = new mx.core.DeferredInstanceFromFunction(_test_Array1_c);


        // events












    }

    /**
     * @private
     **/ 
    private var __moduleFactoryInitialized:Boolean = false;

    /**
     * @private
     * Override the module factory so we can defer setting style declarations
     * until a module factory is set. Without the correct module factory set
     * the style declaration will end up in the wrong style manager.
     **/ 
    override public function set moduleFactory(factory:IFlexModuleFactory):void
    {
        super.moduleFactory = factory;
        
        if (__moduleFactoryInitialized)
            return;

        __moduleFactoryInitialized = true;


        // our style settings


        // ambient styles
        mx_internal::_test_StylesInit();

                         
    }
 
    //  initialize()
    /**
     * @private
     **/
    override public function initialize():void
    {


        super.initialize();
    }


    //  scripts
    //  <Script>, line 10 - 81

			import flash.net.URLLoader;
			import flash.net.URLLoaderDataFormat;
			import mx.controls.Alert;
			import mx.messaging.config.ServerConfig;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.RemoteObject;
			private function doOnHelloWorldOk(event:ResultEvent):void
			{
				var msg:String=event.result as String;
				Alert.show(msg);
			}
			private function doOnFault(event:FaultEvent):void
			{
				Alert.show(event.fault.faultDetail);
			}
			private function hello2():void
			{
				var destination:String="TestFacade";
				var ro:RemoteObject=new RemoteObject(destination);
				ro.addEventListener(ResultEvent.RESULT,doOnHelloWorldOk);
				ro.addEventListener(FaultEvent.FAULT,doOnFault);
				ro.hello();
				Alert.show("hi!");
			}
			private function showCurrentConfig():void
			{
				TextArea_config1.text=ServerConfig.xml.toString();
			}
			
			private function showNewConfig():void
			{
			   this.loadConfgi();
			}
			private var configUrl:String="FlexChannelsConfig";
			private var loader:URLLoader=new URLLoader();
			private function loadConfgi():void
			{
			    var request:URLRequest=new URLRequest();
				request.url=configUrl;
				this.loader.dataFormat=URLLoaderDataFormat.TEXT;
				this.loader.load(request);
				this.loader.addEventListener(Event.COMPLETE,onLoad);
				this.loader.addEventListener(IOErrorEvent.IO_ERROR,onLoadError);	
			}
			private function onLoadError(event:IOErrorEvent):void
			{
			    Alert.show(event.errorID+" : "+event.text);
			}
			private var serverXml:XML;
			private function onLoad(even:Event):void
			{
				this.serverXml=new XML(this.loader.data);
				this.TextArea_config2.text=this.serverXml.toString();
			}
			private function merge():void
			{
				var newXml:XML=serverXml.copy();
				var curXmlList:XMLList=ServerConfig.xml.children();
				for(var i:int=curXmlList.length()-1;i--;i>0)
				{
				   var xml:XML=curXmlList[i];
				   if (xml.name!="channels")
				   {
					   newXml.insertChildAfter(null,xml);
				   }
				}
				this.TextArea_config3.text=newXml.toString();
				
			}
		

    //  end scripts


    //  supporting function definitions for properties, events, styles, effects
private function _test_Array1_c() : Array
{
	var temp : Array = [_test_Button1_c(), _test_TextArea1_i(), _test_TextArea2_i(), _test_TextArea3_i(), _test_Button2_c(), _test_Button3_c(), _test_Button4_c()];
	return temp;
}

private function _test_Button1_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.x = 58;
	temp.y = 31;
	temp.label = "Button";
	temp.addEventListener("click", ___test_Button1_click);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___test_Button1_click(event:flash.events.MouseEvent):void
{
	hello2();
}

private function _test_TextArea1_i() : spark.components.TextArea
{
	var temp : spark.components.TextArea = new spark.components.TextArea();
	temp.x = 10;
	temp.y = 96;
	temp.width = 463;
	temp.height = 494;
	temp.id = "TextArea_config1";
	if (!temp.document) temp.document = this;
	TextArea_config1 = temp;
	mx.binding.BindingManager.executeBindings(this, "TextArea_config1", TextArea_config1);
	return temp;
}

private function _test_TextArea2_i() : spark.components.TextArea
{
	var temp : spark.components.TextArea = new spark.components.TextArea();
	temp.x = 481;
	temp.y = 96;
	temp.width = 463;
	temp.height = 494;
	temp.id = "TextArea_config2";
	if (!temp.document) temp.document = this;
	TextArea_config2 = temp;
	mx.binding.BindingManager.executeBindings(this, "TextArea_config2", TextArea_config2);
	return temp;
}

private function _test_TextArea3_i() : spark.components.TextArea
{
	var temp : spark.components.TextArea = new spark.components.TextArea();
	temp.x = 953;
	temp.y = 97;
	temp.width = 475;
	temp.height = 494;
	temp.id = "TextArea_config3";
	if (!temp.document) temp.document = this;
	TextArea_config3 = temp;
	mx.binding.BindingManager.executeBindings(this, "TextArea_config3", TextArea_config3);
	return temp;
}

private function _test_Button2_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.x = 74;
	temp.y = 67;
	temp.label = "展示当前的配置";
	temp.addEventListener("click", ___test_Button2_click);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___test_Button2_click(event:flash.events.MouseEvent):void
{
	showCurrentConfig();
}

private function _test_Button3_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.x = 621;
	temp.y = 67;
	temp.label = "展示更改后的配置";
	temp.addEventListener("click", ___test_Button3_click);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___test_Button3_click(event:flash.events.MouseEvent):void
{
	showNewConfig();
}

private function _test_Button4_c() : spark.components.Button
{
	var temp : spark.components.Button = new spark.components.Button();
	temp.x = 1098;
	temp.y = 67;
	temp.label = "合并";
	temp.addEventListener("click", ___test_Button4_click);
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___test_Button4_click(event:flash.events.MouseEvent):void
{
	merge();
}



    //  initialize style defs for test

    mx_internal var _test_StylesInit_done:Boolean = false;

    mx_internal function _test_StylesInit():void
    {
        //  only add our style defs to the style manager once
        if (mx_internal::_test_StylesInit_done)
            return;
        else
            mx_internal::_test_StylesInit_done = true;
            
        var style:CSSStyleDeclaration;
        var effects:Array;
                    

        var conditions:Array;
        var condition:CSSCondition;
        var selector:CSSSelector;

        styleManager.initProtoChainRoots();
    }


    //  embed carrier vars
    //  end embed carrier vars


//  end class def
}

//  end package def
}
