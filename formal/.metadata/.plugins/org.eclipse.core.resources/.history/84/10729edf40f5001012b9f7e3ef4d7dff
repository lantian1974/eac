import java.io.FileReader;


import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.xml.sax.SAXException;
import org.w3c.dom.NodeList;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
public class Main 
{
	private static final String SERVICE_XML = "./myservice.xml";
	public static void main(String[] args)throws JAXBException, IOException, ParserConfigurationException, SAXException 
   {
	   Service s=new Service();
	   Channel c1=new Channel();
	   Endpoint e1=new Endpoint();
	  
	   List<JAXBElement<String>> props=new ArrayList<JAXBElement<String>>();
	   JAXBElement<String> de1=new JAXBElement<String>(new QName("sex"),String.class,"woman");
	   JAXBElement<String> de2=new JAXBElement<String>(new QName("name"),String.class,"kate");
	   JAXBElement<String> de3=new JAXBElement<String>(new QName("age"),String.class,"20");
	   props.add(de1);
	   props.add(de2);
	   props.add(de3);
	   e1.setUrl("http://{server.name}:{server.port}/{context.root}/messagebroker/amf" );
	   e1.setClassName("flex.messaging.endpoints.AMFEndpoint");
	   c1.setId("my-amf");
	   c1.setClassName("mx.messaging.channels.AMFChannel");
	   c1.setEndpoint(e1);
	   ArrayList<Channel> channels=new ArrayList<Channel>();
	   channels.add(c1);
	   c1.setProperties(props);
	   s.setChannels(channels);
	   JAXBContext context = JAXBContext.newInstance(Service.class);
	   Marshaller m = context.createMarshaller();
	   m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
	   m.marshal(s, System.out);

		Writer w = null;
		try {
			w = new FileWriter(SERVICE_XML);
			m.marshal(s, w);
		} finally {
			try {
				w.close();
			} catch (Exception e) {
			}
		}
		Unmarshaller um = context.createUnmarshaller();
	    DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
	    dbf.setNamespaceAware(true);
	    DocumentBuilder db = dbf.newDocumentBuilder();
	    Document doc = db.parse(new File( "./services-config.xml"));
	    doc.getDocumentElement();
	    
	    XPathFactory factory = XPathFactory.newInstance();
	    XPath xpath = factory.newXPath();
	    XPathExpression expr 
	     = xpath.compile("//book[author='Neal Stephenson']/title/text()");

	    for(int i=0;i<nodeList.getLength();i++)
	    {
	    	Node node=nodeList.item(i);
	    	System.out.print(node.getNodeName());
	    }
	 
 
	  //  Service Service2 = (Service)um.unmarshal( doc );
	//	MyListener listener=new MyListener();
       // um.setListener(listener);
        Service service2 =  (Service) um.unmarshal(new FileReader(
				"./services-config.xml"));
        for(Channel channel:service2.getChannels())
        {
        	List<JAXBElement<String>> properties=channel.getProperties();
        	if (properties==null) continue;
        	i
        	
        }
		 m.marshal(service2, System.out);
		
	   
   }
}
